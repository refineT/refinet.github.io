[
{
	"uri": "https://refinet.github.io/basics/terraform/",
	"title": "Terraform",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://refinet.github.io/basics/others/",
	"title": "Others",
	"tags": [],
	"description": "",
	"content": "This is hte others pages\n"
},
{
	"uri": "https://refinet.github.io/basics/basics-sec-captical/",
	"title": "basics-sec-chapter",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://refinet.github.io/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Some Chapter title "
},
{
	"uri": "https://refinet.github.io/",
	"title": "HomePage",
	"tags": [],
	"description": "",
	"content": "HomePage This is the homepage. "
},
{
	"uri": "https://refinet.github.io/projects/",
	"title": "Projects",
	"tags": [],
	"description": "",
	"content": "Chapter 2 Some Chapter title "
},
{
	"uri": "https://refinet.github.io/basics/basics-sec-captical/basics_second_content/",
	"title": "basics_Second_content",
	"tags": [],
	"description": "",
	"content": "basics second content test\n"
},
{
	"uri": "https://refinet.github.io/basics/basics-sec-captical/basics_second_content2/",
	"title": "basics_Second_content2",
	"tags": [],
	"description": "",
	"content": "basics second content2 test\n"
},
{
	"uri": "https://refinet.github.io/projects/dso/dso_second_content/",
	"title": "DSO Second_content",
	"tags": [],
	"description": "",
	"content": "projects second content test\n"
},
{
	"uri": "https://refinet.github.io/basics/others/others/",
	"title": "Others",
	"tags": [],
	"description": "",
	"content": "Table of Contents Introduction\nReference links\nTerraform project structure\nSourceCode\nRootModule ChildModule Terraform module deployment\n(tes1)\ntest2\nMercury\nVenus\nEarth (Orbit/Moon)\nMars\nJupiter\nSaturn\nUranus\nNeptune\nComet Haley\nTask Time required Assigned to Current Status Finished Calendar Cache \u0026gt; 5 hours in progress - [x] ok? Object Cache \u0026gt; 5 hours in progress [x] item1[ ] item2 Object Cache \u0026gt; 5 hours in progress - [x] item1- [ ] item2 Object Cache \u0026gt; 5 hours in progress [x] item1[ ] item2 works\nworks too\nIntroduction Terraform is an open-source, infrastructure as code, software tool created by HashiCorp. Users define and provide data center infrastructure using a declarative configuration language known as HashiCorp Configuration Language (HCL), or optionally JSON.\nterraform init: Download and install Terraform plugins and remote modules, init workspace terraform plan: Dry run terraform code terraform apply: Create/update infrastructure resources defined in the code terraform destroy: Delete infrastructure resources Reference links: www.terraform.io/language registry.terraform.io/search/providers?namespace=hashicorp registry.terraform.io/providers/hashicorp/azurerm/latest/docs Terraform project structure wangliang@wanglwh macbook pro squad1_wangliang % tree . ├── main.tf ├── modules │ ├── Vnet │ │ ├── main.tf │ │ ├── output.tf │ │ └── variables.tf │ ├── resourceGroup │ │ ├── main.tf │ │ ├── output.tf │ │ └── variables.tf │ ├── securityGroup │ │ ├── main.tf │ │ ├── output.tf │ │ └── variables.tf │ └── subnet │ ├── main.tf │ ├── output.tf │ └── variables.tf ├── output.tf ├── terraform.tfstate.d │ ├── dev │ │ ├── terraform.tfstate │ │ └── terraform.tfstate.backup │ └── test │ ├── terraform.tfstate │ └── terraform.tfstate.backup ├── variables │ ├── dev.tfvars │ └── test.tfvars └── variables.tf 9 directories, 21 files SourceCode RootModule main.tf terraform { required_version = \u0026#34;\u0026gt;=0.12\u0026#34; required_providers { azurerm = { source = \u0026#34;hashicorp/azurerm\u0026#34; version = \u0026#34;~\u0026gt;2.0\u0026#34; } random = { source = \u0026#34;hashicorp/random\u0026#34; version = \u0026#34;~\u0026gt;3.0\u0026#34; } } } # Configure the Microsoft Azure Provider provider \u0026#34;azurerm\u0026#34; { features {} } module \u0026#34;Azure_Module_RG\u0026#34; { source = \u0026#34;./modules/resourceGroup\u0026#34; resource_group_name = var.resource_group_name location = var.location tags = var.tags } module \u0026#34;Azure_Module_Vnet\u0026#34; { source = \u0026#34;./modules/Vnet\u0026#34; resource_group_name = module.Azure_Module_RG.resource_group_name location = var.location vnet = var.vnet tags = var.tags } module \u0026#34;Azure_Module_Subnet\u0026#34; { source = \u0026#34;./modules/subnet\u0026#34; resource_group_name = module.Azure_Module_RG.resource_group_name location = var.location virtual_network_name = module.Azure_Module_Vnet.vnet_name subnet = var.subnet tags = var.tags } module \u0026#34;Azure_Module_NetworkSecurityGroup\u0026#34; { source = \u0026#34;./modules/securityGroup\u0026#34; resource_group_name = module.Azure_Module_RG.resource_group_name security_group_name = var.security_group_name location = var.location security_rule = var.security_rule tags = var.tags } resource \u0026#34;azurerm_virtual_network_peering\u0026#34; \u0026#34;peering-1\u0026#34; { name = \u0026#34;WE-IAC-TF-D-PEER-VENT001toVNET002\u0026#34; resource_group_name = module.Azure_Module_RG.resource_group_name virtual_network_name = module.Azure_Module_Vnet.vnet_name[0] remote_virtual_network_id = module.Azure_Module_Vnet.vnet_id[1] } resource \u0026#34;azurerm_virtual_network_peering\u0026#34; \u0026#34;peering-2\u0026#34; { name = \u0026#34;WE-IAC-TF-D-PEER-VENT002toVNET001\u0026#34; resource_group_name = module.Azure_Module_RG.resource_group_name virtual_network_name = module.Azure_Module_Vnet.vnet_name[1] remote_virtual_network_id = module.Azure_Module_Vnet.vnet_id[0] } variables.tf variable \u0026#34;resource_group_name\u0026#34; { description = \u0026#34;The name of the module demo resource group in which the resources will be created\u0026#34; type = string default = \u0026#34;EU-IAC-TF-D-RG\u0026#34; } variable \u0026#34;security_group_name\u0026#34; { description = \u0026#34;security_group_name\u0026#34; type = string default = \u0026#34;EU-IAC-TF-D-NSG001\u0026#34; } variable \u0026#34;location\u0026#34; { description = \u0026#34;The location where module demo resource group will be created\u0026#34; type = string default = \u0026#34;East Us\u0026#34; } variable \u0026#34;tags\u0026#34; { description = \u0026#34;A map of the tags to use for the module demo resources that are deployed\u0026#34; type = map(string) default = { environment = \u0026#34;Dev\u0026#34; Owner = \u0026#34;wanglwh\u0026#34; } } variable \u0026#34;vnet\u0026#34; { type = map(any) description = \u0026#34;vnet\u0026#34; } variable \u0026#34;subnet\u0026#34; { type = map(any) description = \u0026#34;subnet\u0026#34; } variable \u0026#34;security_rule\u0026#34; { type = map(any) description = \u0026#34;security_rule\u0026#34; } variables/dev.tfvars resource_group_name = \u0026#34;EU-IAC-TF-D-RG-alpha\u0026#34; location = \u0026#34;East Us\u0026#34; tags = {environment = \u0026#34;Dev-tfvars\u0026#34;, Owner = \u0026#34;wanglwh\u0026#34;} security_group_name = \u0026#34;EU-IAC-TF-D-NSG001-alpha\u0026#34; vnet = { vnet_1 = { name = \u0026#34;EU-IAC-TF-D-VNET001-alpha\u0026#34; location = \u0026#34;East Us\u0026#34; address_space = [\u0026#34;10.0.0.0/16\u0026#34;] subnet_name = \u0026#34;EU-IAC-TF-D-VNET001-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.0.1.0/24\u0026#34; } vnet_2 = { name = \u0026#34;EU-IAC-TF-D-VNET002-alpha\u0026#34; location = \u0026#34;East Us\u0026#34; address_space = [\u0026#34;10.1.0.0/16\u0026#34;] subnet_name = \u0026#34;EU-IAC-TF-D-VNET002-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.1.1.0/24\u0026#34; } } subnet = { subnet_1 = { subnet_name = \u0026#34;EU-IAC-TF-D-VNET001-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.0.2.0/24\u0026#34; } subnet_2 = { subnet_name = \u0026#34;EU-IAC-TF-D-VNET002-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.1.2.0/24\u0026#34; } } security_rule = { rule_1 = { name = \u0026#34;Allow_TCP_ANY_InBound-alpha\u0026#34; priority = 100 direction = \u0026#34;Inbound\u0026#34; access = \u0026#34;Allow\u0026#34; protocol = \u0026#34;Tcp\u0026#34; source_port_range = \u0026#34;*\u0026#34; destination_port_range = \u0026#34;*\u0026#34; source_address_prefix = \u0026#34;*\u0026#34; destination_address_prefix = \u0026#34;*\u0026#34; } rule_2 = { name = \u0026#34;Allow_UDP_ANY_OutBound-alpha\u0026#34; priority = 100 direction = \u0026#34;Outbound\u0026#34; access = \u0026#34;Allow\u0026#34; protocol = \u0026#34;Udp\u0026#34; source_port_range = \u0026#34;*\u0026#34; destination_port_range = \u0026#34;*\u0026#34; source_address_prefix = \u0026#34;*\u0026#34; destination_address_prefix = \u0026#34;*\u0026#34; } } variables/test.tfvars resource_group_name = \u0026#34;EU-IAC-TF-D-RG-beta\u0026#34; location = \u0026#34;East Us\u0026#34; tags = {environment = \u0026#34;Test-tfvars\u0026#34;, Owner = \u0026#34;wanglwh\u0026#34;} security_group_name = \u0026#34;EU-IAC-TF-D-NSG001-beta\u0026#34; vnet = { vnet_1 = { name = \u0026#34;EU-IAC-TF-D-VNET001-beta\u0026#34; location = \u0026#34;East Us\u0026#34; address_space = [\u0026#34;10.0.0.0/16\u0026#34;] subnet_name = \u0026#34;EU-IAC-TF-D-VNET001-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.0.1.0/24\u0026#34; } vnet_2 = { name = \u0026#34;EU-IAC-TF-D-VNET002-beta\u0026#34; location = \u0026#34;East Us\u0026#34; address_space = [\u0026#34;10.1.0.0/16\u0026#34;] subnet_name = \u0026#34;EU-IAC-TF-D-VNET002-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.1.1.0/24\u0026#34; } } security_rule = { rule_1 = { name = \u0026#34;Allow_TCP_ANY_InBound-beta\u0026#34; priority = 100 direction = \u0026#34;Inbound\u0026#34; access = \u0026#34;Allow\u0026#34; protocol = \u0026#34;Tcp\u0026#34; source_port_range = \u0026#34;*\u0026#34; destination_port_range = \u0026#34;*\u0026#34; source_address_prefix = \u0026#34;*\u0026#34; destination_address_prefix = \u0026#34;*\u0026#34; } rule_2 = { name = \u0026#34;Allow_UDP_ANY_OutBound-beta\u0026#34; priority = 100 direction = \u0026#34;Outbound\u0026#34; access = \u0026#34;Allow\u0026#34; protocol = \u0026#34;Udp\u0026#34; source_port_range = \u0026#34;*\u0026#34; destination_port_range = \u0026#34;*\u0026#34; source_address_prefix = \u0026#34;*\u0026#34; destination_address_prefix = \u0026#34;*\u0026#34; } } ChildModule /modules/resourceGroup\nmain.tf resource \u0026#34;azurerm_resource_group\u0026#34; \u0026#34;rg\u0026#34; { location = var.location name = var.resource_group_name tags = var.tags } variable.tf variable \u0026#34;resource_group_name\u0026#34; { description = \u0026#34;The name of the module demo resource group in which the resources will be created\u0026#34; type = string default = \u0026#34;EU-IAC-TF-D-RG\u0026#34; } variable \u0026#34;location\u0026#34; { description = \u0026#34;The location where module demo resource group will be created\u0026#34; type = string default = \u0026#34;East Us\u0026#34; } variable \u0026#34;tags\u0026#34; { description = \u0026#34;A map of the tags to use for the module demo resources that are deployed\u0026#34; type = map(string) default = { environment = \u0026#34;Dev\u0026#34; Owner = \u0026#34;wanglwh\u0026#34; } } output.tf output \u0026#34;resource_group_name\u0026#34; { value = azurerm_resource_group.rg.name } output \u0026#34;location\u0026#34; { value = azurerm_resource_group.rg.location } /modules/securityGroup\nmain.tf resource \u0026#34;azurerm_network_security_group\u0026#34; \u0026#34;sg\u0026#34; { name = var.security_group_name location = var.location resource_group_name = var.resource_group_name for_each = var.security_rule security_rule { name = each.value[\u0026#34;name\u0026#34;] priority = each.value[\u0026#34;priority\u0026#34;] direction = each.value[\u0026#34;direction\u0026#34;] access = each.value[\u0026#34;access\u0026#34;] protocol = each.value[\u0026#34;protocol\u0026#34;] source_port_range = each.value[\u0026#34;source_port_range\u0026#34;] destination_port_range = each.value[\u0026#34;destination_port_range\u0026#34;] source_address_prefix = each.value[\u0026#34;source_address_prefix\u0026#34;] destination_address_prefix = each.value[\u0026#34;destination_address_prefix\u0026#34;] } tags = var.tags } variable.tf variable \u0026#34;resource_group_name\u0026#34; { description = \u0026#34;The name of the module demo resource group in which the resources will be created\u0026#34; type = string default = \u0026#34;EU-IAC-TF-D-RG\u0026#34; } variable \u0026#34;security_group_name\u0026#34; { description = \u0026#34;The location where module demo security group will be created\u0026#34; type = string default = \u0026#34;EU-IAC-TF-D-NSG001\u0026#34; } variable \u0026#34;location\u0026#34; { description = \u0026#34;The location where module demo resource group will be created\u0026#34; type = string default = \u0026#34;East Us\u0026#34; } variable \u0026#34;security_rule\u0026#34; { type = map(any) default = { rule_1 = { name = \u0026#34;Allow_TCP_ANY_InBound\u0026#34; priority = 100 direction = \u0026#34;Inbound\u0026#34; access = \u0026#34;Allow\u0026#34; protocol = \u0026#34;Tcp\u0026#34; source_port_range = \u0026#34;*\u0026#34; destination_port_range = \u0026#34;*\u0026#34; source_address_prefix = \u0026#34;*\u0026#34; destination_address_prefix = \u0026#34;*\u0026#34; } rule_2 = { name = \u0026#34;Allow_UDP_ANY_OutBound\u0026#34; priority = 100 direction = \u0026#34;Outbound\u0026#34; access = \u0026#34;Allow\u0026#34; protocol = \u0026#34;Udp\u0026#34; source_port_range = \u0026#34;*\u0026#34; destination_port_range = \u0026#34;*\u0026#34; source_address_prefix = \u0026#34;*\u0026#34; destination_address_prefix = \u0026#34;*\u0026#34; } } } variable \u0026#34;tags\u0026#34; { description = \u0026#34;A map of the tags to use for the module demo resources that are deployed\u0026#34; type = map(string) default = { environment = \u0026#34;Dev\u0026#34; Owner = \u0026#34;wanglwh@cn.ibm.com\u0026#34; } } output.tf output \u0026#34;security_group_name_id\u0026#34; { value = values(azurerm_network_security_group.sg)[*].id } /modules/Vnet\nmain.tf resource \u0026#34;azurerm_virtual_network\u0026#34; \u0026#34;VNET\u0026#34; { for_each = var.vnet name = each.value[\u0026#34;name\u0026#34;] location = var.location resource_group_name = var.resource_group_name address_space = each.value[\u0026#34;address_space\u0026#34;] subnet { name = each.value[\u0026#34;subnet_name\u0026#34;] address_prefix = each.value[\u0026#34;subnet_address_prefix\u0026#34;] } tags = var.tags } variable.tf variable \u0026#34;vnet\u0026#34; { type = map(any) default = { vnet_1 = { name = \u0026#34;EU-IAC-TF-D-VNET001\u0026#34; location = \u0026#34;East Us\u0026#34; address_space = [\u0026#34;10.0.0.0/16\u0026#34;] subnet_name = \u0026#34;EU-IAC-TF-D-VNET001-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.0.1.0/24\u0026#34; } vnet_2 = { name = \u0026#34;EU-IAC-TF-D-VNET002\u0026#34; location = \u0026#34;East Us\u0026#34; address_space = [\u0026#34;10.1.0.0/16\u0026#34;] subnet_name = \u0026#34;EU-IAC-TF-D-VNET002-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.1.1.0/24\u0026#34; } } } variable \u0026#34;resource_group_name\u0026#34; { description = \u0026#34;The name of the module demo resource group in which the resources will be created\u0026#34; type = string default = \u0026#34;EU-IAC-TF-D-RG\u0026#34; } variable \u0026#34;location\u0026#34; { description = \u0026#34;The location where module demo resource group will be created\u0026#34; type = string default = \u0026#34;East Us\u0026#34; } variable \u0026#34;tags\u0026#34; { description = \u0026#34;A map of the tags to use for the module demo resources that are deployed\u0026#34; type = map(string) default = { environment = \u0026#34;Dev\u0026#34; Owner = \u0026#34;wanglwh@cn.ibm.com\u0026#34; } } output.tf output \u0026#34;vnet_id\u0026#34; { value = values(azurerm_virtual_network.VNET)[*].id } output \u0026#34;vnet_name\u0026#34; { value = values(azurerm_virtual_network.VNET)[*].name } /modules/subnet\nmain.tf resource \u0026#34;azurerm_subnet\u0026#34; \u0026#34;subnet\u0026#34; { resource_group_name = var.resource_group_name count = length(var.virtual_network_name) virtual_network_name = var.virtual_network_name[count.index] for_each = var.subnets name = each.value[\u0026#34;subnet_name\u0026#34;] address_prefixes = each.value[\u0026#34;subnet_address_prefix\u0026#34;] tags = var.tags } variable.tf variable \u0026#34;resource_group_name\u0026#34; { type = string description = \u0026#34;Name of the resource_group_name\u0026#34; } variable \u0026#34;location\u0026#34; { type = string description = \u0026#34;Name of the location\u0026#34; } variable \u0026#34;tags\u0026#34; { type = map(any) } variable \u0026#34;subnets\u0026#34; { type = map(any) description = \u0026#34;Subnets map\u0026#34; } variable \u0026#34;virtual_network_name\u0026#34; { type = list(string) description = \u0026#34;virtual_network_name list\u0026#34; } output.tf output \u0026#34;vnet_name_out\u0026#34; { value = azurerm_virtual_network.vnet.name } output \u0026#34;vnet_id_out\u0026#34; { value = azurerm_virtual_network.vnet.id } output \u0026#34;azure_subnet_id\u0026#34; { value = { for id in keys(var.subnets) : id =\u0026gt; azurerm_subnet.subnet[id].id } description = \u0026#34;Lists the ID\u0026#39;s of the subnets\u0026#34; } Terraform module deployment Init terraform workspace dev/staging/prod\nterraform workspace new dev/staging/prod\nterraform workspace select dev\nterraform init Plan cloud resource\nterraform plan -var-file=\u0026quot;./variables/dev.tfvars\u0026quot; Create/update cloud resources\nterraform apply -var-file=\u0026quot;./variables/dev.tfvars\u0026quot; Destroy and delete cloud resource\nterraform destroy -var-file=\u0026quot;./variables/dev.tfvars\u0026quot; Back to top\n"
},
{
	"uri": "https://refinet.github.io/basics/terraform/iac/",
	"title": "Terraform IaC",
	"tags": [],
	"description": "",
	"content": "Table of Contents Introduction Reference links Terraform project structure SourceCode RootModule ChildModule Terraform module deployment Introduction Terraform is an open-source, infrastructure as code, software tool created by HashiCorp. Users define and provide data center infrastructure using a declarative configuration language known as HashiCorp Configuration Language (HCL), or optionally JSON.\nterraform init: Download and install Terraform plugins and remote modules, init workspace terraform plan: Dry run terraform code terraform apply: Create/update infrastructure resources defined in the code terraform destroy: Delete infrastructure resources Reference links: www.terraform.io/language registry.terraform.io/search/providers?namespace=hashicorp registry.terraform.io/providers/hashicorp/azurerm/latest/docs Terraform project structure wangliang@wanglwh macbook pro squad1_wangliang % tree . ├── main.tf ├── modules │ ├── Vnet │ │ ├── main.tf │ │ ├── output.tf │ │ └── variables.tf │ ├── resourceGroup │ │ ├── main.tf │ │ ├── output.tf │ │ └── variables.tf │ ├── securityGroup │ │ ├── main.tf │ │ ├── output.tf │ │ └── variables.tf │ └── subnet │ ├── main.tf │ ├── output.tf │ └── variables.tf ├── output.tf ├── terraform.tfstate.d │ ├── dev │ │ ├── terraform.tfstate │ │ └── terraform.tfstate.backup │ └── test │ ├── terraform.tfstate │ └── terraform.tfstate.backup ├── variables │ ├── dev.tfvars │ └── test.tfvars └── variables.tf 9 directories, 21 files SourceCode RootModule main.tf terraform { required_version = \u0026#34;\u0026gt;=0.12\u0026#34; required_providers { azurerm = { source = \u0026#34;hashicorp/azurerm\u0026#34; version = \u0026#34;~\u0026gt;2.0\u0026#34; } random = { source = \u0026#34;hashicorp/random\u0026#34; version = \u0026#34;~\u0026gt;3.0\u0026#34; } } } # Configure the Microsoft Azure Provider provider \u0026#34;azurerm\u0026#34; { features {} } module \u0026#34;Azure_Module_RG\u0026#34; { source = \u0026#34;./modules/resourceGroup\u0026#34; resource_group_name = var.resource_group_name location = var.location tags = var.tags } module \u0026#34;Azure_Module_Vnet\u0026#34; { source = \u0026#34;./modules/Vnet\u0026#34; resource_group_name = module.Azure_Module_RG.resource_group_name location = var.location vnet = var.vnet tags = var.tags } module \u0026#34;Azure_Module_Subnet\u0026#34; { source = \u0026#34;./modules/subnet\u0026#34; resource_group_name = module.Azure_Module_RG.resource_group_name location = var.location virtual_network_name = module.Azure_Module_Vnet.vnet_name subnet = var.subnet tags = var.tags } module \u0026#34;Azure_Module_NetworkSecurityGroup\u0026#34; { source = \u0026#34;./modules/securityGroup\u0026#34; resource_group_name = module.Azure_Module_RG.resource_group_name security_group_name = var.security_group_name location = var.location security_rule = var.security_rule tags = var.tags } resource \u0026#34;azurerm_virtual_network_peering\u0026#34; \u0026#34;peering-1\u0026#34; { name = \u0026#34;WE-IAC-TF-D-PEER-VENT001toVNET002\u0026#34; resource_group_name = module.Azure_Module_RG.resource_group_name virtual_network_name = module.Azure_Module_Vnet.vnet_name[0] remote_virtual_network_id = module.Azure_Module_Vnet.vnet_id[1] } resource \u0026#34;azurerm_virtual_network_peering\u0026#34; \u0026#34;peering-2\u0026#34; { name = \u0026#34;WE-IAC-TF-D-PEER-VENT002toVNET001\u0026#34; resource_group_name = module.Azure_Module_RG.resource_group_name virtual_network_name = module.Azure_Module_Vnet.vnet_name[1] remote_virtual_network_id = module.Azure_Module_Vnet.vnet_id[0] } variables.tf variable \u0026#34;resource_group_name\u0026#34; { description = \u0026#34;The name of the module demo resource group in which the resources will be created\u0026#34; type = string default = \u0026#34;EU-IAC-TF-D-RG\u0026#34; } variable \u0026#34;security_group_name\u0026#34; { description = \u0026#34;security_group_name\u0026#34; type = string default = \u0026#34;EU-IAC-TF-D-NSG001\u0026#34; } variable \u0026#34;location\u0026#34; { description = \u0026#34;The location where module demo resource group will be created\u0026#34; type = string default = \u0026#34;East Us\u0026#34; } variable \u0026#34;tags\u0026#34; { description = \u0026#34;A map of the tags to use for the module demo resources that are deployed\u0026#34; type = map(string) default = { environment = \u0026#34;Dev\u0026#34; Owner = \u0026#34;wanglwh\u0026#34; } } variable \u0026#34;vnet\u0026#34; { type = map(any) description = \u0026#34;vnet\u0026#34; } variable \u0026#34;subnet\u0026#34; { type = map(any) description = \u0026#34;subnet\u0026#34; } variable \u0026#34;security_rule\u0026#34; { type = map(any) description = \u0026#34;security_rule\u0026#34; } variables/dev.tfvars resource_group_name = \u0026#34;EU-IAC-TF-D-RG-alpha\u0026#34; location = \u0026#34;East Us\u0026#34; tags = {environment = \u0026#34;Dev-tfvars\u0026#34;, Owner = \u0026#34;wanglwh\u0026#34;} security_group_name = \u0026#34;EU-IAC-TF-D-NSG001-alpha\u0026#34; vnet = { vnet_1 = { name = \u0026#34;EU-IAC-TF-D-VNET001-alpha\u0026#34; location = \u0026#34;East Us\u0026#34; address_space = [\u0026#34;10.0.0.0/16\u0026#34;] subnet_name = \u0026#34;EU-IAC-TF-D-VNET001-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.0.1.0/24\u0026#34; } vnet_2 = { name = \u0026#34;EU-IAC-TF-D-VNET002-alpha\u0026#34; location = \u0026#34;East Us\u0026#34; address_space = [\u0026#34;10.1.0.0/16\u0026#34;] subnet_name = \u0026#34;EU-IAC-TF-D-VNET002-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.1.1.0/24\u0026#34; } } subnet = { subnet_1 = { subnet_name = \u0026#34;EU-IAC-TF-D-VNET001-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.0.2.0/24\u0026#34; } subnet_2 = { subnet_name = \u0026#34;EU-IAC-TF-D-VNET002-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.1.2.0/24\u0026#34; } } security_rule = { rule_1 = { name = \u0026#34;Allow_TCP_ANY_InBound-alpha\u0026#34; priority = 100 direction = \u0026#34;Inbound\u0026#34; access = \u0026#34;Allow\u0026#34; protocol = \u0026#34;Tcp\u0026#34; source_port_range = \u0026#34;*\u0026#34; destination_port_range = \u0026#34;*\u0026#34; source_address_prefix = \u0026#34;*\u0026#34; destination_address_prefix = \u0026#34;*\u0026#34; } rule_2 = { name = \u0026#34;Allow_UDP_ANY_OutBound-alpha\u0026#34; priority = 100 direction = \u0026#34;Outbound\u0026#34; access = \u0026#34;Allow\u0026#34; protocol = \u0026#34;Udp\u0026#34; source_port_range = \u0026#34;*\u0026#34; destination_port_range = \u0026#34;*\u0026#34; source_address_prefix = \u0026#34;*\u0026#34; destination_address_prefix = \u0026#34;*\u0026#34; } } variables/test.tfvars resource_group_name = \u0026#34;EU-IAC-TF-D-RG-beta\u0026#34; location = \u0026#34;East Us\u0026#34; tags = {environment = \u0026#34;Test-tfvars\u0026#34;, Owner = \u0026#34;wanglwh\u0026#34;} security_group_name = \u0026#34;EU-IAC-TF-D-NSG001-beta\u0026#34; vnet = { vnet_1 = { name = \u0026#34;EU-IAC-TF-D-VNET001-beta\u0026#34; location = \u0026#34;East Us\u0026#34; address_space = [\u0026#34;10.0.0.0/16\u0026#34;] subnet_name = \u0026#34;EU-IAC-TF-D-VNET001-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.0.1.0/24\u0026#34; } vnet_2 = { name = \u0026#34;EU-IAC-TF-D-VNET002-beta\u0026#34; location = \u0026#34;East Us\u0026#34; address_space = [\u0026#34;10.1.0.0/16\u0026#34;] subnet_name = \u0026#34;EU-IAC-TF-D-VNET002-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.1.1.0/24\u0026#34; } } security_rule = { rule_1 = { name = \u0026#34;Allow_TCP_ANY_InBound-beta\u0026#34; priority = 100 direction = \u0026#34;Inbound\u0026#34; access = \u0026#34;Allow\u0026#34; protocol = \u0026#34;Tcp\u0026#34; source_port_range = \u0026#34;*\u0026#34; destination_port_range = \u0026#34;*\u0026#34; source_address_prefix = \u0026#34;*\u0026#34; destination_address_prefix = \u0026#34;*\u0026#34; } rule_2 = { name = \u0026#34;Allow_UDP_ANY_OutBound-beta\u0026#34; priority = 100 direction = \u0026#34;Outbound\u0026#34; access = \u0026#34;Allow\u0026#34; protocol = \u0026#34;Udp\u0026#34; source_port_range = \u0026#34;*\u0026#34; destination_port_range = \u0026#34;*\u0026#34; source_address_prefix = \u0026#34;*\u0026#34; destination_address_prefix = \u0026#34;*\u0026#34; } } ChildModule /modules/resourceGroup\nmain.tf resource \u0026#34;azurerm_resource_group\u0026#34; \u0026#34;rg\u0026#34; { location = var.location name = var.resource_group_name tags = var.tags } variable.tf variable \u0026#34;resource_group_name\u0026#34; { description = \u0026#34;The name of the module demo resource group in which the resources will be created\u0026#34; type = string default = \u0026#34;EU-IAC-TF-D-RG\u0026#34; } variable \u0026#34;location\u0026#34; { description = \u0026#34;The location where module demo resource group will be created\u0026#34; type = string default = \u0026#34;East Us\u0026#34; } variable \u0026#34;tags\u0026#34; { description = \u0026#34;A map of the tags to use for the module demo resources that are deployed\u0026#34; type = map(string) default = { environment = \u0026#34;Dev\u0026#34; Owner = \u0026#34;wanglwh\u0026#34; } } output.tf output \u0026#34;resource_group_name\u0026#34; { value = azurerm_resource_group.rg.name } output \u0026#34;location\u0026#34; { value = azurerm_resource_group.rg.location } /modules/securityGroup\nmain.tf resource \u0026#34;azurerm_network_security_group\u0026#34; \u0026#34;sg\u0026#34; { name = var.security_group_name location = var.location resource_group_name = var.resource_group_name for_each = var.security_rule security_rule { name = each.value[\u0026#34;name\u0026#34;] priority = each.value[\u0026#34;priority\u0026#34;] direction = each.value[\u0026#34;direction\u0026#34;] access = each.value[\u0026#34;access\u0026#34;] protocol = each.value[\u0026#34;protocol\u0026#34;] source_port_range = each.value[\u0026#34;source_port_range\u0026#34;] destination_port_range = each.value[\u0026#34;destination_port_range\u0026#34;] source_address_prefix = each.value[\u0026#34;source_address_prefix\u0026#34;] destination_address_prefix = each.value[\u0026#34;destination_address_prefix\u0026#34;] } tags = var.tags } variable.tf variable \u0026#34;resource_group_name\u0026#34; { description = \u0026#34;The name of the module demo resource group in which the resources will be created\u0026#34; type = string default = \u0026#34;EU-IAC-TF-D-RG\u0026#34; } variable \u0026#34;security_group_name\u0026#34; { description = \u0026#34;The location where module demo security group will be created\u0026#34; type = string default = \u0026#34;EU-IAC-TF-D-NSG001\u0026#34; } variable \u0026#34;location\u0026#34; { description = \u0026#34;The location where module demo resource group will be created\u0026#34; type = string default = \u0026#34;East Us\u0026#34; } variable \u0026#34;security_rule\u0026#34; { type = map(any) default = { rule_1 = { name = \u0026#34;Allow_TCP_ANY_InBound\u0026#34; priority = 100 direction = \u0026#34;Inbound\u0026#34; access = \u0026#34;Allow\u0026#34; protocol = \u0026#34;Tcp\u0026#34; source_port_range = \u0026#34;*\u0026#34; destination_port_range = \u0026#34;*\u0026#34; source_address_prefix = \u0026#34;*\u0026#34; destination_address_prefix = \u0026#34;*\u0026#34; } rule_2 = { name = \u0026#34;Allow_UDP_ANY_OutBound\u0026#34; priority = 100 direction = \u0026#34;Outbound\u0026#34; access = \u0026#34;Allow\u0026#34; protocol = \u0026#34;Udp\u0026#34; source_port_range = \u0026#34;*\u0026#34; destination_port_range = \u0026#34;*\u0026#34; source_address_prefix = \u0026#34;*\u0026#34; destination_address_prefix = \u0026#34;*\u0026#34; } } } variable \u0026#34;tags\u0026#34; { description = \u0026#34;A map of the tags to use for the module demo resources that are deployed\u0026#34; type = map(string) default = { environment = \u0026#34;Dev\u0026#34; Owner = \u0026#34;wanglwh@cn.ibm.com\u0026#34; } } output.tf output \u0026#34;security_group_name_id\u0026#34; { value = values(azurerm_network_security_group.sg)[*].id } /modules/Vnet\nmain.tf resource \u0026#34;azurerm_virtual_network\u0026#34; \u0026#34;VNET\u0026#34; { for_each = var.vnet name = each.value[\u0026#34;name\u0026#34;] location = var.location resource_group_name = var.resource_group_name address_space = each.value[\u0026#34;address_space\u0026#34;] subnet { name = each.value[\u0026#34;subnet_name\u0026#34;] address_prefix = each.value[\u0026#34;subnet_address_prefix\u0026#34;] } tags = var.tags } variable.tf variable \u0026#34;vnet\u0026#34; { type = map(any) default = { vnet_1 = { name = \u0026#34;EU-IAC-TF-D-VNET001\u0026#34; location = \u0026#34;East Us\u0026#34; address_space = [\u0026#34;10.0.0.0/16\u0026#34;] subnet_name = \u0026#34;EU-IAC-TF-D-VNET001-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.0.1.0/24\u0026#34; } vnet_2 = { name = \u0026#34;EU-IAC-TF-D-VNET002\u0026#34; location = \u0026#34;East Us\u0026#34; address_space = [\u0026#34;10.1.0.0/16\u0026#34;] subnet_name = \u0026#34;EU-IAC-TF-D-VNET002-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.1.1.0/24\u0026#34; } } } variable \u0026#34;resource_group_name\u0026#34; { description = \u0026#34;The name of the module demo resource group in which the resources will be created\u0026#34; type = string default = \u0026#34;EU-IAC-TF-D-RG\u0026#34; } variable \u0026#34;location\u0026#34; { description = \u0026#34;The location where module demo resource group will be created\u0026#34; type = string default = \u0026#34;East Us\u0026#34; } variable \u0026#34;tags\u0026#34; { description = \u0026#34;A map of the tags to use for the module demo resources that are deployed\u0026#34; type = map(string) default = { environment = \u0026#34;Dev\u0026#34; Owner = \u0026#34;wanglwh@cn.ibm.com\u0026#34; } } output.tf output \u0026#34;vnet_id\u0026#34; { value = values(azurerm_virtual_network.VNET)[*].id } output \u0026#34;vnet_name\u0026#34; { value = values(azurerm_virtual_network.VNET)[*].name } /modules/subnet\nmain.tf resource \u0026#34;azurerm_subnet\u0026#34; \u0026#34;subnet\u0026#34; { resource_group_name = var.resource_group_name count = length(var.virtual_network_name) virtual_network_name = var.virtual_network_name[count.index] for_each = var.subnets name = each.value[\u0026#34;subnet_name\u0026#34;] address_prefixes = each.value[\u0026#34;subnet_address_prefix\u0026#34;] tags = var.tags } variable.tf variable \u0026#34;resource_group_name\u0026#34; { type = string description = \u0026#34;Name of the resource_group_name\u0026#34; } variable \u0026#34;location\u0026#34; { type = string description = \u0026#34;Name of the location\u0026#34; } variable \u0026#34;tags\u0026#34; { type = map(any) } variable \u0026#34;subnets\u0026#34; { type = map(any) description = \u0026#34;Subnets map\u0026#34; } variable \u0026#34;virtual_network_name\u0026#34; { type = list(string) description = \u0026#34;virtual_network_name list\u0026#34; } output.tf output \u0026#34;vnet_name_out\u0026#34; { value = azurerm_virtual_network.vnet.name } output \u0026#34;vnet_id_out\u0026#34; { value = azurerm_virtual_network.vnet.id } output \u0026#34;azure_subnet_id\u0026#34; { value = { for id in keys(var.subnets) : id =\u0026gt; azurerm_subnet.subnet[id].id } description = \u0026#34;Lists the ID\u0026#39;s of the subnets\u0026#34; } Terraform module deployment Init terraform workspace dev/staging/prod\nterraform workspace new dev/staging/prod\nterraform workspace select dev\nterraform init Plan cloud resource\nterraform plan -var-file=\u0026quot;./variables/dev.tfvars\u0026quot; Create/update cloud resources\nterraform apply -var-file=\u0026quot;./variables/dev.tfvars\u0026quot; Destroy and delete cloud resource\nterraform destroy -var-file=\u0026quot;./variables/dev.tfvars\u0026quot; Back to top\n"
},
{
	"uri": "https://refinet.github.io/projects/dso/",
	"title": "DSO-chapter",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://refinet.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://refinet.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]