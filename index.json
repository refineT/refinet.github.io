[
{
	"uri": "https://refinet.github.io/basics/network/",
	"title": "Network",
	"tags": [],
	"description": "",
	"content": "This is the network pages\n"
},
{
	"uri": "https://refinet.github.io/basics/terraform/",
	"title": "Terraform",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://refinet.github.io/basics/",
	"title": "Basics",
	"tags": [],
	"description": "",
	"content": "Chapter 1 Some Chapter title "
},
{
	"uri": "https://refinet.github.io/",
	"title": "HomePage",
	"tags": [],
	"description": "",
	"content": "HomePage This is the homepage. "
},
{
	"uri": "https://refinet.github.io/projects/",
	"title": "Projects",
	"tags": [],
	"description": "",
	"content": "Chapter 2 Some Chapter title "
},
{
	"uri": "https://refinet.github.io/projects/dso/dso/",
	"title": "DSO Second_content",
	"tags": [],
	"description": "",
	"content": "TODO LIST: \u0026lt;[def]\u0026gt; \u0026lt;t:1668657540:F\u0026gt; \u0026lt;t:1668657540:T\u0026gt; \\ time:1668657540:F [def]: :166865754 \\\ntest test prog test\ntest3 test3 agagin\n"
},
{
	"uri": "https://refinet.github.io/projects/dso/dso_second_content/",
	"title": "DSO Second_content",
	"tags": [],
	"description": "",
	"content": "大家好，我是王翊宸！ 这是我开发的网站。\n我攀岩的视频如下。 "
},
{
	"uri": "https://refinet.github.io/basics/terraform/iac/",
	"title": "Terraform IaC",
	"tags": [],
	"description": "",
	"content": "Table of Contents Introduction Reference links Terraform project structure SourceCode RootModule ChildModule Terraform module deployment Introduction Terraform is an open-source, infrastructure as code, software tool created by HashiCorp. Users define and provide data center infrastructure using a declarative configuration language known as HashiCorp Configuration Language (HCL), or optionally JSON.\nterraform init: Download and install Terraform plugins and remote modules, init workspace terraform plan: Dry run terraform code terraform apply: Create/update infrastructure resources defined in the code terraform destroy: Delete infrastructure resources Reference links www.terraform.io/language registry.terraform.io/search/providers?namespace=hashicorp registry.terraform.io/providers/hashicorp/azurerm/latest/docs Terraform project structure wangliang@wanglwh macbook pro squad1_wangliang % tree . ├── main.tf ├── modules │ ├── Vnet │ │ ├── main.tf │ │ ├── output.tf │ │ └── variables.tf │ ├── resourceGroup │ │ ├── main.tf │ │ ├── output.tf │ │ └── variables.tf │ ├── securityGroup │ │ ├── main.tf │ │ ├── output.tf │ │ └── variables.tf │ └── subnet │ ├── main.tf │ ├── output.tf │ └── variables.tf ├── output.tf ├── terraform.tfstate.d │ ├── dev │ │ ├── terraform.tfstate │ │ └── terraform.tfstate.backup │ └── test │ ├── terraform.tfstate │ └── terraform.tfstate.backup ├── variables │ ├── dev.tfvars │ └── test.tfvars └── variables.tf 9 directories, 21 files SourceCode RootModule main.tf terraform { required_version = \u0026#34;\u0026gt;=0.12\u0026#34; required_providers { azurerm = { source = \u0026#34;hashicorp/azurerm\u0026#34; version = \u0026#34;~\u0026gt;2.0\u0026#34; } random = { source = \u0026#34;hashicorp/random\u0026#34; version = \u0026#34;~\u0026gt;3.0\u0026#34; } } } # Configure the Microsoft Azure Provider provider \u0026#34;azurerm\u0026#34; { features {} } module \u0026#34;Azure_Module_RG\u0026#34; { source = \u0026#34;./modules/resourceGroup\u0026#34; resource_group_name = var.resource_group_name location = var.location tags = var.tags } module \u0026#34;Azure_Module_Vnet\u0026#34; { source = \u0026#34;./modules/Vnet\u0026#34; resource_group_name = module.Azure_Module_RG.resource_group_name location = var.location vnet = var.vnet tags = var.tags } module \u0026#34;Azure_Module_Subnet\u0026#34; { source = \u0026#34;./modules/subnet\u0026#34; resource_group_name = module.Azure_Module_RG.resource_group_name location = var.location virtual_network_name = module.Azure_Module_Vnet.vnet_name subnet = var.subnet tags = var.tags } module \u0026#34;Azure_Module_NetworkSecurityGroup\u0026#34; { source = \u0026#34;./modules/securityGroup\u0026#34; resource_group_name = module.Azure_Module_RG.resource_group_name security_group_name = var.security_group_name location = var.location security_rule = var.security_rule tags = var.tags } resource \u0026#34;azurerm_virtual_network_peering\u0026#34; \u0026#34;peering-1\u0026#34; { name = \u0026#34;WE-IAC-TF-D-PEER-VENT001toVNET002\u0026#34; resource_group_name = module.Azure_Module_RG.resource_group_name virtual_network_name = module.Azure_Module_Vnet.vnet_name[0] remote_virtual_network_id = module.Azure_Module_Vnet.vnet_id[1] } resource \u0026#34;azurerm_virtual_network_peering\u0026#34; \u0026#34;peering-2\u0026#34; { name = \u0026#34;WE-IAC-TF-D-PEER-VENT002toVNET001\u0026#34; resource_group_name = module.Azure_Module_RG.resource_group_name virtual_network_name = module.Azure_Module_Vnet.vnet_name[1] remote_virtual_network_id = module.Azure_Module_Vnet.vnet_id[0] } variables.tf variable \u0026#34;resource_group_name\u0026#34; { description = \u0026#34;The name of the module demo resource group in which the resources will be created\u0026#34; type = string default = \u0026#34;EU-IAC-TF-D-RG\u0026#34; } variable \u0026#34;security_group_name\u0026#34; { description = \u0026#34;security_group_name\u0026#34; type = string default = \u0026#34;EU-IAC-TF-D-NSG001\u0026#34; } variable \u0026#34;location\u0026#34; { description = \u0026#34;The location where module demo resource group will be created\u0026#34; type = string default = \u0026#34;East Us\u0026#34; } variable \u0026#34;tags\u0026#34; { description = \u0026#34;A map of the tags to use for the module demo resources that are deployed\u0026#34; type = map(string) default = { environment = \u0026#34;Dev\u0026#34; Owner = \u0026#34;wanglwh\u0026#34; } } variable \u0026#34;vnet\u0026#34; { type = map(any) description = \u0026#34;vnet\u0026#34; } variable \u0026#34;subnet\u0026#34; { type = map(any) description = \u0026#34;subnet\u0026#34; } variable \u0026#34;security_rule\u0026#34; { type = map(any) description = \u0026#34;security_rule\u0026#34; } variables/dev.tfvars resource_group_name = \u0026#34;EU-IAC-TF-D-RG-alpha\u0026#34; location = \u0026#34;East Us\u0026#34; tags = {environment = \u0026#34;Dev-tfvars\u0026#34;, Owner = \u0026#34;wanglwh\u0026#34;} security_group_name = \u0026#34;EU-IAC-TF-D-NSG001-alpha\u0026#34; vnet = { vnet_1 = { name = \u0026#34;EU-IAC-TF-D-VNET001-alpha\u0026#34; location = \u0026#34;East Us\u0026#34; address_space = [\u0026#34;10.0.0.0/16\u0026#34;] subnet_name = \u0026#34;EU-IAC-TF-D-VNET001-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.0.1.0/24\u0026#34; } vnet_2 = { name = \u0026#34;EU-IAC-TF-D-VNET002-alpha\u0026#34; location = \u0026#34;East Us\u0026#34; address_space = [\u0026#34;10.1.0.0/16\u0026#34;] subnet_name = \u0026#34;EU-IAC-TF-D-VNET002-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.1.1.0/24\u0026#34; } } subnet = { subnet_1 = { subnet_name = \u0026#34;EU-IAC-TF-D-VNET001-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.0.2.0/24\u0026#34; } subnet_2 = { subnet_name = \u0026#34;EU-IAC-TF-D-VNET002-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.1.2.0/24\u0026#34; } } security_rule = { rule_1 = { name = \u0026#34;Allow_TCP_ANY_InBound-alpha\u0026#34; priority = 100 direction = \u0026#34;Inbound\u0026#34; access = \u0026#34;Allow\u0026#34; protocol = \u0026#34;Tcp\u0026#34; source_port_range = \u0026#34;*\u0026#34; destination_port_range = \u0026#34;*\u0026#34; source_address_prefix = \u0026#34;*\u0026#34; destination_address_prefix = \u0026#34;*\u0026#34; } rule_2 = { name = \u0026#34;Allow_UDP_ANY_OutBound-alpha\u0026#34; priority = 100 direction = \u0026#34;Outbound\u0026#34; access = \u0026#34;Allow\u0026#34; protocol = \u0026#34;Udp\u0026#34; source_port_range = \u0026#34;*\u0026#34; destination_port_range = \u0026#34;*\u0026#34; source_address_prefix = \u0026#34;*\u0026#34; destination_address_prefix = \u0026#34;*\u0026#34; } } variables/test.tfvars resource_group_name = \u0026#34;EU-IAC-TF-D-RG-beta\u0026#34; location = \u0026#34;East Us\u0026#34; tags = {environment = \u0026#34;Test-tfvars\u0026#34;, Owner = \u0026#34;wanglwh\u0026#34;} security_group_name = \u0026#34;EU-IAC-TF-D-NSG001-beta\u0026#34; vnet = { vnet_1 = { name = \u0026#34;EU-IAC-TF-D-VNET001-beta\u0026#34; location = \u0026#34;East Us\u0026#34; address_space = [\u0026#34;10.0.0.0/16\u0026#34;] subnet_name = \u0026#34;EU-IAC-TF-D-VNET001-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.0.1.0/24\u0026#34; } vnet_2 = { name = \u0026#34;EU-IAC-TF-D-VNET002-beta\u0026#34; location = \u0026#34;East Us\u0026#34; address_space = [\u0026#34;10.1.0.0/16\u0026#34;] subnet_name = \u0026#34;EU-IAC-TF-D-VNET002-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.1.1.0/24\u0026#34; } } security_rule = { rule_1 = { name = \u0026#34;Allow_TCP_ANY_InBound-beta\u0026#34; priority = 100 direction = \u0026#34;Inbound\u0026#34; access = \u0026#34;Allow\u0026#34; protocol = \u0026#34;Tcp\u0026#34; source_port_range = \u0026#34;*\u0026#34; destination_port_range = \u0026#34;*\u0026#34; source_address_prefix = \u0026#34;*\u0026#34; destination_address_prefix = \u0026#34;*\u0026#34; } rule_2 = { name = \u0026#34;Allow_UDP_ANY_OutBound-beta\u0026#34; priority = 100 direction = \u0026#34;Outbound\u0026#34; access = \u0026#34;Allow\u0026#34; protocol = \u0026#34;Udp\u0026#34; source_port_range = \u0026#34;*\u0026#34; destination_port_range = \u0026#34;*\u0026#34; source_address_prefix = \u0026#34;*\u0026#34; destination_address_prefix = \u0026#34;*\u0026#34; } } ChildModule /modules/resourceGroup\nmain.tf resource \u0026#34;azurerm_resource_group\u0026#34; \u0026#34;rg\u0026#34; { location = var.location name = var.resource_group_name tags = var.tags } variable.tf variable \u0026#34;resource_group_name\u0026#34; { description = \u0026#34;The name of the module demo resource group in which the resources will be created\u0026#34; type = string default = \u0026#34;EU-IAC-TF-D-RG\u0026#34; } variable \u0026#34;location\u0026#34; { description = \u0026#34;The location where module demo resource group will be created\u0026#34; type = string default = \u0026#34;East Us\u0026#34; } variable \u0026#34;tags\u0026#34; { description = \u0026#34;A map of the tags to use for the module demo resources that are deployed\u0026#34; type = map(string) default = { environment = \u0026#34;Dev\u0026#34; Owner = \u0026#34;wanglwh\u0026#34; } } output.tf output \u0026#34;resource_group_name\u0026#34; { value = azurerm_resource_group.rg.name } output \u0026#34;location\u0026#34; { value = azurerm_resource_group.rg.location } /modules/securityGroup\nmain.tf resource \u0026#34;azurerm_network_security_group\u0026#34; \u0026#34;sg\u0026#34; { name = var.security_group_name location = var.location resource_group_name = var.resource_group_name for_each = var.security_rule security_rule { name = each.value[\u0026#34;name\u0026#34;] priority = each.value[\u0026#34;priority\u0026#34;] direction = each.value[\u0026#34;direction\u0026#34;] access = each.value[\u0026#34;access\u0026#34;] protocol = each.value[\u0026#34;protocol\u0026#34;] source_port_range = each.value[\u0026#34;source_port_range\u0026#34;] destination_port_range = each.value[\u0026#34;destination_port_range\u0026#34;] source_address_prefix = each.value[\u0026#34;source_address_prefix\u0026#34;] destination_address_prefix = each.value[\u0026#34;destination_address_prefix\u0026#34;] } tags = var.tags } variable.tf variable \u0026#34;resource_group_name\u0026#34; { description = \u0026#34;The name of the module demo resource group in which the resources will be created\u0026#34; type = string default = \u0026#34;EU-IAC-TF-D-RG\u0026#34; } variable \u0026#34;security_group_name\u0026#34; { description = \u0026#34;The location where module demo security group will be created\u0026#34; type = string default = \u0026#34;EU-IAC-TF-D-NSG001\u0026#34; } variable \u0026#34;location\u0026#34; { description = \u0026#34;The location where module demo resource group will be created\u0026#34; type = string default = \u0026#34;East Us\u0026#34; } variable \u0026#34;security_rule\u0026#34; { type = map(any) default = { rule_1 = { name = \u0026#34;Allow_TCP_ANY_InBound\u0026#34; priority = 100 direction = \u0026#34;Inbound\u0026#34; access = \u0026#34;Allow\u0026#34; protocol = \u0026#34;Tcp\u0026#34; source_port_range = \u0026#34;*\u0026#34; destination_port_range = \u0026#34;*\u0026#34; source_address_prefix = \u0026#34;*\u0026#34; destination_address_prefix = \u0026#34;*\u0026#34; } rule_2 = { name = \u0026#34;Allow_UDP_ANY_OutBound\u0026#34; priority = 100 direction = \u0026#34;Outbound\u0026#34; access = \u0026#34;Allow\u0026#34; protocol = \u0026#34;Udp\u0026#34; source_port_range = \u0026#34;*\u0026#34; destination_port_range = \u0026#34;*\u0026#34; source_address_prefix = \u0026#34;*\u0026#34; destination_address_prefix = \u0026#34;*\u0026#34; } } } variable \u0026#34;tags\u0026#34; { description = \u0026#34;A map of the tags to use for the module demo resources that are deployed\u0026#34; type = map(string) default = { environment = \u0026#34;Dev\u0026#34; Owner = \u0026#34;wanglwh@cn.ibm.com\u0026#34; } } output.tf output \u0026#34;security_group_name_id\u0026#34; { value = values(azurerm_network_security_group.sg)[*].id } /modules/Vnet\nmain.tf resource \u0026#34;azurerm_virtual_network\u0026#34; \u0026#34;VNET\u0026#34; { for_each = var.vnet name = each.value[\u0026#34;name\u0026#34;] location = var.location resource_group_name = var.resource_group_name address_space = each.value[\u0026#34;address_space\u0026#34;] subnet { name = each.value[\u0026#34;subnet_name\u0026#34;] address_prefix = each.value[\u0026#34;subnet_address_prefix\u0026#34;] } tags = var.tags } variable.tf variable \u0026#34;vnet\u0026#34; { type = map(any) default = { vnet_1 = { name = \u0026#34;EU-IAC-TF-D-VNET001\u0026#34; location = \u0026#34;East Us\u0026#34; address_space = [\u0026#34;10.0.0.0/16\u0026#34;] subnet_name = \u0026#34;EU-IAC-TF-D-VNET001-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.0.1.0/24\u0026#34; } vnet_2 = { name = \u0026#34;EU-IAC-TF-D-VNET002\u0026#34; location = \u0026#34;East Us\u0026#34; address_space = [\u0026#34;10.1.0.0/16\u0026#34;] subnet_name = \u0026#34;EU-IAC-TF-D-VNET002-SNET001\u0026#34; subnet_address_prefix = \u0026#34;10.1.1.0/24\u0026#34; } } } variable \u0026#34;resource_group_name\u0026#34; { description = \u0026#34;The name of the module demo resource group in which the resources will be created\u0026#34; type = string default = \u0026#34;EU-IAC-TF-D-RG\u0026#34; } variable \u0026#34;location\u0026#34; { description = \u0026#34;The location where module demo resource group will be created\u0026#34; type = string default = \u0026#34;East Us\u0026#34; } variable \u0026#34;tags\u0026#34; { description = \u0026#34;A map of the tags to use for the module demo resources that are deployed\u0026#34; type = map(string) default = { environment = \u0026#34;Dev\u0026#34; Owner = \u0026#34;wanglwh@cn.ibm.com\u0026#34; } } output.tf output \u0026#34;vnet_id\u0026#34; { value = values(azurerm_virtual_network.VNET)[*].id } output \u0026#34;vnet_name\u0026#34; { value = values(azurerm_virtual_network.VNET)[*].name } /modules/subnet\nmain.tf resource \u0026#34;azurerm_subnet\u0026#34; \u0026#34;subnet\u0026#34; { resource_group_name = var.resource_group_name count = length(var.virtual_network_name) virtual_network_name = var.virtual_network_name[count.index] for_each = var.subnets name = each.value[\u0026#34;subnet_name\u0026#34;] address_prefixes = each.value[\u0026#34;subnet_address_prefix\u0026#34;] tags = var.tags } variable.tf variable \u0026#34;resource_group_name\u0026#34; { type = string description = \u0026#34;Name of the resource_group_name\u0026#34; } variable \u0026#34;location\u0026#34; { type = string description = \u0026#34;Name of the location\u0026#34; } variable \u0026#34;tags\u0026#34; { type = map(any) } variable \u0026#34;subnets\u0026#34; { type = map(any) description = \u0026#34;Subnets map\u0026#34; } variable \u0026#34;virtual_network_name\u0026#34; { type = list(string) description = \u0026#34;virtual_network_name list\u0026#34; } output.tf output \u0026#34;vnet_name_out\u0026#34; { value = azurerm_virtual_network.vnet.name } output \u0026#34;vnet_id_out\u0026#34; { value = azurerm_virtual_network.vnet.id } output \u0026#34;azure_subnet_id\u0026#34; { value = { for id in keys(var.subnets) : id =\u0026gt; azurerm_subnet.subnet[id].id } description = \u0026#34;Lists the ID\u0026#39;s of the subnets\u0026#34; } Terraform module deployment Init terraform workspace dev/staging/prod\nterraform workspace new dev/staging/prod\nterraform workspace select dev\nterraform init Plan cloud resource\nterraform plan -var-file=\u0026quot;./variables/dev.tfvars\u0026quot; Create/update cloud resources\nterraform apply -var-file=\u0026quot;./variables/dev.tfvars\u0026quot; Destroy and delete cloud resource\nterraform destroy -var-file=\u0026quot;./variables/dev.tfvars\u0026quot; Back to top\n"
},
{
	"uri": "https://refinet.github.io/basics/network/network/",
	"title": "交换路由",
	"tags": [],
	"description": "",
	"content": "Table of Contents 路由分类 动态配置命令 vlan间路由 单臂路由 三层交换机路由交换 交换机管理vlan 路由分类 - 静态路由 - 动态路由协议 内部网关协议: 距离矢量协议：RIPv2 EIGRP 链路状态协议：OSPF ISIS 外部网关协议：BGP 动态配置命令 RIP Router(config)#router rip #启动RIP路由选择进程 #RIP AD值120 Router(config-router)#network network-number #宣告网段，network-number是路由器接口直连的网段，如192.168.10.0 #RIP只支持主类网络宣告 Example: 1.1.1.1/24 192.168.12.0/24 192.168.23.0/24 3.3.3.3/24 ------------R1-----------------R2-----------------R3------------ R1: router rip network 1.0.0.0 network 192.168.12.0 R2: router rip network 192.168.12.0 network 192.168.23.0 R3: router rip network 192.168.23.0 network 3.0.0.0/24 OSPF Router(config)#router ospf process-id #开启OSPF进程 #OSPF AD值110 Router(config-router)#network address wildcard-mask area area-id #宣告特定的网络到OSPF区域 Example1: --------------------area 0------------------ | | | 192.168.12.0/24 192.168.23.0/24 | R1--------------------R2-------------------R3 | | -------------------------------------------- R1: router ospf 1 network 192.168.12.0 0.0.0.255 area 0 R2: router ospf 1 network 192.168.12.0 0.0.0.255 area 0 network 192.168.23.0 0.0.0.255 area 0 R3: router ospf 1 network 192.168.23.0 0.0.0.255 area 0 Example2: ---------area 0----------------area 1-------- | ｜ | | 192.168.12.0/24 ｜ 192.168.23.0/24 | R1--------------------R2--------------------R3 | ｜ | --------------------------------------------- R2: router ospf 1 network 192.168.12.0 0.0.0.255 area 0 network 192.168.23.0 0.0.0.255 area 1 vlan间路由 单臂路由 R1-f1/0------------f0/0--WAN |f0/0 | | |f0/15 SW f0/1\\ f0/2 / \\ / \\ /f0/0 \\f0/0 PC1 PC2 PC1: no ip routing ip default-gateway 192.168.10.254 int f 0/0 ip add 192.168.10.1 255.255.255.0 no shutdown PC2: no ip routing ip default-gateway 192.168.20.254 int f 0/0 ip add 192.168.20.1 255.255.255.0 no shutdown Switch: vlan 10 vlan 20 #创建vlan 10 20 interface f 0/1 sw mo ac sw ac vlan 10 #把接口f 0/1划进vlan 10 interface f 0/2 sw mo ac sw ac vlan 20 #把接口f 0/2划进vlan 20 interface f 0/15 switchport trunk encapsulation dot1q switchport mode trunk #把f 0/15配置为trunk Router: interface f 0/0 no shutdown #物理接口只需要no shutdown，不需要其他的配置 interface f 0/0.10 encapsulation dot1Q 10 ip add 192.168.10.254 255.255.255.0 no shutdown #创建子接口 interface f 0/0.20 encapsulation dot1Q 20 ip add 192.168.20.254 255.255.255.0 no shutdown interface f 1/0 ip add 202.101.100.1 255.255.255.0 no shutdown conf t access-list 1 permit 192.168.0.0 0.0.255.255 ip nat inside source list 1 interface f1/0 overload interface f 1/0 ip nat outside #定义nat outside接口 interface f0/0.10 ip nat inside interface f0/0.20 ip nat inside #注意，在子接口上定义nat inside ip route 0.0.0.0 0.0.0.0 202.101.100.2 #出口设备，定义默认路由 WAN: interface f 0/0 ip add 202.101.100.2 255.255.255.0 no shutdown vlan间可以通信，也可以和WAN通信 三层交换机路由交换 - 三层交换机的端口模式 - 二层接口: access模式， trunk模式 - 三层接口: 路由接口(no switchport), SVI接口 |------------------------| | L3-SWITCH | | interface vlan10 | | interface vlan20 | | T T L3--|----------L3link-------Router |----|-----------|-------| |trunk |trunk | | |--------------------|------| |--|-------------------------| | L2-SWITCH1 | | | | L2-SWITCH2 | | 10 10 T | | T 20 20 | | | | | | | |---------|-----------------| |--------------|-------------| | | PC1 PC2 PC1: no ip routing ip default-gateway 192.168.10.254 int f 0/0 ip add 192.168.10.1 255.255.255.0 PC2: no ip routing ip default-gateway 192.168.20.254 int f 0/0 ip add 192.168.20.1 255.255.255.0 L2-SWITCH1: no ip routing vlan 10 int f 0/0 switchport mode access switchport access vlan 10 int f 0/24 switchport trunk encapsulation dot1Q swithchport mode trunk L2-SWITCH2: no ip routing vlan 20 int f0/0 switchport mode access switchport access vlan 20 int f 0/24 switchport trunk encapsulation dot1Q swithcport mode trunk L3-SWITCH: ip routing vlan 10 int vlan 10 ip add 192.168.10.254 255.255.255.0 no shutdown vlan 20 int vlan 20 ip add 192.168.20.254 255.255.255.0 no shutdown int f 0/0 switchport trunk encapsulation dot1Q switchport mode trunk int f 0/1 switchport trunk encapsulation dot1Q switchport mode trunk int f 0/2 no switchport ip add 192.168.254.1 255.255.255.0 no shutdown ip route 0.0.0.0 0.0.0.0 192.168.254.2 Router: int f 0/0 ip add 192.168.254.2 255.255.255.0 no shutdown ip route 192.168.0.0 255.255.0.0 192.168.254.1 交换机管理vlan 交换机的管理vlan用于交换机本身的设备管理 二层交换机只能有一个vlan接口可以拥有ip地址，具体的vlan可以更加实际需求设定 有了这个vlan接口，PC就能telnet到交换机上执行管理操作 |--------------------------| |--------------------------| | L2SWITCH | | L3SWITCH | | | | | | interface vlan255 | | interface vlan255 | | | | interface vlan10 | | | | interface vlan20 | | | | | | 10 10 T-----|-|-----T 10 20 | | | | | | | |----|---------------------| |---------------|----------| | | | | PC1 PC2 PC1: no ip routing ip default-gateway 192.168.10.254 255.255.255.0 int f 0/0 ip add 192.168.10.1 PC2: no ip routing ip default-gateway 192.168.20.254 255.255.255.0 int f 0/0 ip add 192.168.20.1 L2SWITCH: no ip routing vlan 10 vlan 255 int vlan 255 ip add 192.168.255.1 255.255.255.0 ip default-gateway 192.168.255.254 255.255.255.0 #因为二层交换机没有路由功能，所以需要给管理vlan设置默认网关，设置回程流量路由 int f 0/0 switchport mode access switchport access vlan 10 int f 0/2 switchport trunk encapsulation dot1Q switchport mode trunk L3SWITCH: vlan 10 vlan 20 vlan 255 interface f 0/0 switchport mode access switchport access vlan 20 interface f 0/2 switchport trunk encapsulation dot1Q siwtchport mode trunk interface vlan 10 ip add 192.168.10.254 255.255.255.0 interface vlan 20 ip add 192.168.20.254 255.255.255.0 interface vlan 255 ip add 192.168.255.254 255.255.255.0 Back to top\n"
},
{
	"uri": "https://refinet.github.io/projects/dso/",
	"title": "DSO-chapter",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://refinet.github.io/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://refinet.github.io/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]